name: Dev-to-server
on:
  push:
    branches:
      - dev
  workflow_dispatch: {}

jobs:
  build_and_deploy:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: dev

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0
          
      - name: Validate secrets
        shell: pwsh
        run: |
          $expectedLengths = @{
            "SWEET_CRAFT_TS_WEBSITE_NAME"         = 9    # site19760
            "SWEET_CRAFT_TS_SERVER_COMPUTER_NAME" = 36   # https://site19760.siteasp.net:8172
            "SWEET_CRAFT_TS_SERVER_USERNAME"      = 9    # site19760
            "SWEET_CRAFT_TS_SERVER_PASSWORD"      = 12   # Ko5-f3%X_Z8p
            "SWEET_CRAFT_TS_CONNECTION_STRING"    = 116  # Server=db15035.databaseasp.net; Database=db15035; User Id=db15035; Password=D=p97J+nZ%s2; Encrypt=False; MultipleActiveResultSets=True;
          }

          $errors = @()

          foreach ($key in $expectedLengths.Keys) {
            $secret = "${{ secrets[$key] }}"
            if ([string]::IsNullOrWhiteSpace($secret)) {
              $errors += "::error:: ‚ùå Secret '$key' is missing or empty!"
              continue
            }

            $actualLength = $secret.Length
            $expectedLength = $expectedLengths[$key]

            if ($actualLength -ne $expectedLength) {
              Write-Host "::warning:: ‚ö†Ô∏è Length mismatch for '$key' -> expected: $expectedLength, got: $actualLength"
            } else {
              Write-Host "::notice:: ‚úÖ '$key' length check passed ($actualLength characters)"
            }
          }

          if ($errors.Count -gt 0) {
            $errors | ForEach-Object { Write-Host $_ }
            exit 1
          }

          Write-Host "‚úÖ All required secrets are present."
      - name: Replace connection string in appsettings.json
        shell: pwsh
        run: |
          $connectionString = "${{ secrets.SWEET_CRAFT_TS_CONNECTION_STRING }}"
          
          Write-Host "üîç Connection string length: $($connectionString.Length) characters"
          
          $appSettingsPath = "WebAPI/appsettings.json"
          if (Test-Path $appSettingsPath) {
            $json = Get-Content $appSettingsPath -Raw | ConvertFrom-Json
            $json.ConnectionStrings.Default = $connectionString
            $json | ConvertTo-Json -Depth 3 | Set-Content -Encoding UTF8 $appSettingsPath

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            $updatedJson = Get-Content $appSettingsPath -Raw | ConvertFrom-Json
            if ([string]::IsNullOrWhiteSpace($updatedJson.ConnectionStrings.Default)) {
              Write-Host "::error:: Connection string was not updated correctly!"
              exit 1
            } else {
              Write-Host "‚úÖ Connection string successfully updated in appsettings.json"
            }
          } else {
            Write-Host "::error:: appsettings.json not found at $appSettingsPath!"
            exit 1
          }

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Publish
        run: dotnet publish --configuration Release --output ./publish --runtime win-x86 
        
      - name: Test with .NET
        run: dotnet test

      - name: Deploy to MonsterASP.NET via WebDeploy
        uses: rasmusbuchholdt/simply-web-deploy@2.1.0
        with:
          website-name: ${{ secrets.SWEET_CRAFT_TS_WEBSITE_NAME }}
          server-computer-name: ${{ secrets.SWEET_CRAFT_TS_SERVER_COMPUTER_NAME }}
          server-username: ${{ secrets.SWEET_CRAFT_TS_SERVER_USERNAME }}
          server-password: ${{ secrets.SWEET_CRAFT_TS_SERVER_PASSWORD }}
